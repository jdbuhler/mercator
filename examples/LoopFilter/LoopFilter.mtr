//
// LOOPFILTER.MTR
// Demonstrate a simple cyclic application
// Does the same thing as ModFilter, but with a loop

reference "UIntWithCounter.h";

Application LoopFilter;

// augment each input value with a loop counter
// the syntax :!1 means that each input produces *exactly* one output
Module Setup : {unsigned int} -> out<UIntWithCounter:!1>;

// main loop node.  Outputs are accept (if all rounds of filtering are done)
// and keepgoing (to continue with the next round of filtering)
Module Filter : UIntWithCounter -> accept<{unsigned int}> , keepgoing<UIntWithCounter>;

// nodes

Node src : Source<{unsigned int}> ;

Node s: Setup;

Node f : Filter;

Node snk : Sink<{unsigned int}> ;

// edges

Edge src -> s;

Edge s -> f;

Edge f::keepgoing -> f; // back edge

Edge f::accept -> snk;

// Let the user set the number of times to go around
// the loop, and the modulus to test against each time
Param numCycles : {unsigned int};
Param moduli    : {unsigned int *};
