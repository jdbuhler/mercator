#ifndef __SelfLoop_1to2map_CU
#define __SelfLoop_1to2map_CU


/* *** MODULE TYPE IMPLEMENTATION FILE ***
 * 
 * Notes to user on usage:
 * 1) This should be the ONLY Mercator file that you modify.
 * 
 * 2) To write output to a channel from within a run() fcn:
 * 	   push(item, `nodeIdx', Out::channelname), where
 * 	  'item' is the item to be written, 'nodeIdx' is the current node's index variable (no single quotes) 
 * 	  passed in as a parameterand 'channelname' is the name
 * 	  given to the channel in the input spec 
 * 	  (which can be found in the comment above the run() header,
 * 	  or in the .cuh header file associated with this implementation).
 * 
 * 3) To access user-defined data from within run() fcn 
 *    (only works if set in user Driver file):
 * 	Full app data: get_appUserData()
 * 	Per-module-type data: this->get_userData()
 * 	Per-module-instance data: this->get_nodeUserData(nodeIdx)
 * 
 * 4) When using multiple threads per item:
 *      -To access thread's offset relative to other threads assigned
 *        to same input item, call eltOffset(threadIdx.x) .
 *      -To access correct output-channel slot, accounting for 
 *        offset, pass offset as third parameter to push() function: 
 *        push(..., ..., eltOffset(threadIdx.x)).
 * 
 * 5) When using multiple items per thread:
 *      -To access number of items assigned to each thread,  *         call this->itemsPerThread(threadIdx.x) .
 *      -To access input items and nodes, use array notation:
  *       inputItems[i] or nodes[i], where 0 <= i < this->itemsPerThread() .
 * 
 */

#include "./BlackScholes/BlackScholes_device.cuh"

////  module Begin(PipeEltT[128] -> accept<PipeEltT>:?1 | 1 : 1)
__device__
void SelfLoop_1to2map::Begin::run(::PipeEltT inputItem, unsigned char nodeIdx)
{
  // init inputItem's curand state
  curandState_t *state = new curandState_t;
  curand_init(blockDim.x * blockIdx.x + threadIdx.x,  /*  seed */ 
              0,  /*  sequence num */
              0,  /*  offset in seq */
              state);
  inputItem.set_randState(state);

  // push downstream
  push(inputItem, nodeIdx, Out::accept);
}


////  module A(PipeEltT[128] -> accept<PipeEltT>:?1, self<PipeEltT>:?1 | 1 : 2)
__device__
void SelfLoop_1to2map::A::run(::PipeEltT inputItem, unsigned char nodeIdx)
{
  // max number of loops for any one item to execute
  // NB: assume items start with loopCount of 0
  static const int NUM_LOOPS = 5;

  ///// computation: 
  //  do NUM_OPTS rounds of Black-Scholes calculations
//  constexpr int NUM_OPTS = 1;
  int num_opts = inputItem.get_workIters();

  //  parameters for BlackScholes fcn call:
  //   first will be used to seed a PRNG, 
  //   both hold results (passed by value)
  float callResult = 1.0f;
  float putResult = 1.0f;

  // item's state for PRNG
  curandState *randState = inputItem.get_randState();

  // call BlackScholes fcn
  doBlackScholes_fast(callResult, putResult, num_opts, randState);

  // store result in item (addition combo is arbitrary)
  inputItem.set_floatResult(callResult + putResult);

  ///// filtering: 
  //  filter out item if its ID is in upper filterRate-fraction of
  //  bounded (node-specific) range; else loop back to self again
  //  --if specified num loops completed, push downstream
  auto nodeData = get_nodeUserData(nodeIdx);
  int currLoopCount = inputItem.get_loopCount();
  float fr = nodeData->get_filterRate(currLoopCount);
  int ub = nodeData->get_upperBound(currLoopCount);

  // border b/t filtered (above) and forwarded (below) items
  int thresh = (1 - fr) * ub;

  bool pass = inputItem.get_ID() < thresh;
  if(pass && eltOffset(threadIdx.x) == 0)
  {
    // increment loop count (we don't care about this for filtered items)
    inputItem.inc_loopCount();

    // if finished, push to accept; else loop back
    if(inputItem.get_loopCount() >= NUM_LOOPS)
      push(inputItem, nodeIdx, Out::accept, eltOffset(threadIdx.x));
    else
      push(inputItem, nodeIdx, Out::self, eltOffset(threadIdx.x));

  }
#if 0
  else  //debug
    printf("Filtered ID %d, range upper-bd %d, filter rate: %.3f, filter upper-bd %d\n",
    inputItem.get_ID(), ub, fr, thresh);
#endif

}


////  module End(PipeEltT[128] -> accept<PipeEltT>:?1 | 1 : 1)
__device__
void SelfLoop_1to2map::End::run(::PipeEltT inputItem, unsigned char nodeIdx)
{
  // destroy inputItem's curand state
  curandState_t *state = inputItem.get_randState();
  if(state) delete state;
	
  // push downstream
  push(inputItem, nodeIdx, Out::accept);	
}



#endif	// __SelfLoop_CU

