//
// OTHERTAXI.MTR
// Demonstrate MERCATOR's enumeration and aggregation functionallity with
// gps location data, higher occupancy version.
//
// MERCATOR
// Copyright (C) 2018 Washington University in St. Louis; all rights reserved.
//

reference "Position.cuh";
reference "TaggedPosition.cuh";
reference "Line.cuh";

Application OtherTaxi;

//
// By default, the filter module produces either 0 or 1 outputs
// for each input on each output channel. This module has a
// single channel, called "accept" (though we need not use this
// name anywhere).

//Module dummy : {unsigned int} -> accept<{unsigned int}>;
Module BracketFind : Enumerate {Line} -> Aggregate accept<{TaggedPosition}>;
Module CoordinateSwap : {TaggedPosition} -> accept<{Position}>;


//Module EnumModule : Enumerate {Composite} -> accept<{unsigned int} from {Composite}>;
////Module EnumModule : Enumerate {unsigned int} -> accept<{unsigned int}>;
//Module Filter : {unsigned int} from {Composite} -> accept<{unsigned int} from {Composite}> ;
//Module AggModule : {unsigned int} from {Composite} -> Aggregate accept<{double}> ;
////Module AggModule : {unsigned int} from {unsigned int} -> accept<{unsigned int}> ;

//AllThreads AggModule;

// nodes

Node src : Source<{Line}>;

Node bf : BracketFind;
Node cs : CoordinateSwap;

Node snk : Sink<{Position}>;

//Node src : Source<{Composite}> ;

//Node e : EnumModule;
//Node f : Filter;
//Node a : AggModule;

//Node snk : Sink<{double}> ;

// edges

Edge src -> bf;
Edge bf -> cs;
Edge cs -> snk;

//Edge src -> e;
//Edge e -> f;
//Edge f -> a;
//Edge a -> snk;

// State statistic
//NodeState AggModule::avgState : {unsigned int*};
