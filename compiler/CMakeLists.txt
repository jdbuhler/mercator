#
# CMake build rules for MERCATOR front end
#
# MERCATOR
# Copyright (C) 2018 Washington University in St. Louis; all rights reserved.

project(MERCATOR_FRONTEND
        LANGUAGES CUDA CXX)

cmake_minimum_required(VERSION 3.8)

#######################################################################
# File dependency list
#######################################################################

add_executable(mercator
	main.cc
	options.cc
	parse.cc
	parser-driver.cc
	typecheck.cc
	app.cc
	buildapp.cc
	topoverify.cc
	codegen/Formatter.cc
	codegen/gen_hostapp_class.cc
	codegen/gen_deviceapp_class.cc
	codegen/gen_deviceapp_ctor.cc
	${CMAKE_CURRENT_BINARY_DIR}/mercator-lexer.cc
	${CMAKE_CURRENT_BINARY_DIR}/mercator-parser.tab.cc
)


#######################################################################
# Compilation flags
#######################################################################

set_property(TARGET mercator PROPERTY CXX_STANDARD 11)

set (CMAKE_CXX_FLAGS_DEBUG   
     "${CMAKE_CXX_FLAGS_DEBUG} -O0 -UNDEBUG -Wall -DVERBOSE")

set (CMAKE_CXX_FLAGS_RELEASE 
     "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG")

set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

######################################################################
# Include paths needed for compilation
######################################################################

target_include_directories(mercator
        PRIVATE ${CMAKE_CURRENT_BINARY_DIR}
        PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/../runtime
	PRIVATE ${LLVM_PATH}/include
)

######################################################################
# Special compile flags for use with typecheck.cc, which uses LLVM
######################################################################

#
# LLVM provides necessary compilation options for code that uses it,
# but remove LLVM-suggested flags that conflict with overall build type
#

execute_process(COMMAND ${LLVM_PATH}/bin/llvm-config --cxxflags
                OUTPUT_VARIABLE LLVM_CXXFLAGS
                OUTPUT_STRIP_TRAILING_WHITESPACE)
string(REGEX REPLACE "-DNDEBUG" "" LLVM_CXXFLAGS ${LLVM_CXXFLAGS})
string(REGEX REPLACE "-O[0-9]" "" LLVM_CXXFLAGS ${LLVM_CXXFLAGS})

set_source_files_properties(typecheck.cc
       PROPERTIES COMPILE_FLAGS
       "${LLVM_CXXFLAGS} -fno-strict-aliasing"
)

######################################################################
# Build magic for MERCATOR's parser and lexer
######################################################################

find_package(FLEX)
FLEX_TARGET(MercatorLexer mercator-lexer.ll 
			  ${CMAKE_CURRENT_BINARY_DIR}/mercator-lexer.cc)

find_package(BISON)
BISON_TARGET(MercatorParser mercator-parser.yy 
			    ${CMAKE_CURRENT_BINARY_DIR}/mercator-parser.tab.cc
             DEFINES_FILE   ${CMAKE_CURRENT_BINARY_DIR}/mercator-parser.tab.hh)

ADD_FLEX_BISON_DEPENDENCY(MercatorLexer MercatorParser)

# we must add source dir to include path so that generated
# mercator-parser.tab.hh can include files from the source dir.
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

######################################################################
# Generated configuration header
######################################################################

# get the LLVM version, which is needed by the configuration header
execute_process(COMMAND ${LLVM_PATH}/bin/llvm-config --version
                OUTPUT_VARIABLE LLVM_VERSION
                OUTPUT_STRIP_TRAILING_WHITESPACE)

configure_file(build_config.h.in
               build_config.h)


######################################################################
# Supplement to cleanup rules
######################################################################

# CMake doesn't know about these extra files generated by various tools.
# Make sure we clean them up when we say "make clean"
set(EXTRA_FILES
    ${CMAKE_CURRENT_BINARY_DIR}/location.hh
    ${CMAKE_CURRENT_BINARY_DIR}/position.hh
    ${CMAKE_CURRENT_BINARY_DIR}/stack.hh
)

set_directory_properties(PROPERTIES
  ADDITIONAL_MAKE_CLEAN_FILES "${EXTRA_FILES}"
)

######################################################################
# Build library dependencies for mercator
######################################################################

# Obtain LLVM library absolute paths from llvm-config
execute_process(COMMAND ${LLVM_PATH}/bin/llvm-config --libfiles
                OUTPUT_VARIABLE LLVM_LIBS
                OUTPUT_STRIP_TRAILING_WHITESPACE)
separate_arguments(LLVM_LIBS)

# Obtain LLVM system library names from llvm-config
execute_process(COMMAND ${LLVM_PATH}/bin/llvm-config --system-libs
                OUTPUT_VARIABLE LLVM_SYSTEM_LIBS
                OUTPUT_STRIP_TRAILING_WHITESPACE)
separate_arguments(LLVM_SYSTEM_LIBS)

# Clang does not have the equivalent of llvm-config, so we must
# list its libraries individually and then find them all.
set (CLANG_LIBNAMES 
             clangTooling
             clangFrontendTool
             clangFrontend
	     clangDriver
	     clangSerialization
	     clangCodeGen
	     clangParse
	     clangSema
	     clangStaticAnalyzerFrontend
	     clangStaticAnalyzerCheckers
	     clangStaticAnalyzerCore
	     clangAnalysis
	     clangARCMigrate
	     clangRewrite
	     clangRewriteFrontend
	     clangEdit
	     clangAST
	     clangLex
	     clangBasic
	     clang
)

foreach (LIB ${CLANG_LIBNAMES})
  find_library(FOUND_LIB_${LIB}
               ${LIB}
               HINTS ${LLVM_PATH}/lib)
  list(APPEND CLANG_LIBS ${FOUND_LIB_${LIB}})
endforeach (LIB)

target_link_libraries(mercator
        ${CLANG_LIBS}
        ${LLVM_LIBS}
        ${LLVM_SYSTEM_LIBS}
)

###############################################################

install(TARGETS mercator
	RUNTIME DESTINATION bin)
